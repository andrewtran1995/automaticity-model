function [x, fval, exitflag, output] = optimizeCOVIS()
    [x, fval, exitflag, output] = particleswarm( ...
        @automaticityModelForCOVISOpt, ...
        4, ...
        [1, 1, 1, 1], ...
        [10, 10, 10, 10], ...
        optimoptions(@particleswarm, 'UseParallel', true, 'Display', 'iter') ...
    );
end

function score = automaticityModelForCOVISOpt(arg_vector)
    params = getmodelparams(ModelConfigButtonSwitch());
    params.COVIS_DELTA_C = arg_vector(1);
    params.COVIS_DELTA_E = arg_vector(2);
    params.COVIS_PERSEV = arg_vector(3);
    params.COVIS_LAMBDA = arg_vector(4);
    
    optional_parms = struct('VIS_INPUT_FROM_PARM', 0, ...
                            'visualinput', zeros(2));
    [config, ~] = automaticityModel_mex(params, optional_parms);
    
    score = mean([ ...
        1 - mean(config.accuracy), ...
        1 - mean(config.COVISRules.log(1:(config.trials - config.meta.trialsAfterSwitch)) == config.COVISRules.correct)...
    ]);
end